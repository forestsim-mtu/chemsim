package edu.mtu.reaction;

import java.io.IOException;
import java.util.HashSet;

import edu.mtu.parser.ChemicalDto;
import edu.mtu.parser.Parser;
import edu.mtu.simulation.ChemSim;

public class Verifier {

	public static void verify(String reactions, String chemicals) {
		try {
			// Application versioning information
			ChemSim.printVersion();
			
			// Import the reactions into the model, print model
			ReactionRegistry instance = ReactionRegistry.getInstance();
			instance.clear();
			String report = instance.load(reactions);
			System.out.println(report);
			
			// Verify all reactants have products or input compounds associated with them
			checkBalance(reactions, chemicals);
			
		} catch (IOException ex) {
			System.err.println("Error while loading reactions.");
			System.err.println(ex.getMessage());
		}
	}
	
	private static void checkBalance(String reactions, String chemicals) throws IOException {
		
		HashSet<String> reactants = new HashSet<String>();
		HashSet<String> products = new HashSet<String>();
		
		// Load the relevant information from the reactions
		for (ChemicalEquation ce : Parser.parseReactions(reactions)) {
			for (String value : ce.reactants) {
				if (!value.toUpperCase().equals("UV")) {
					reactants.add(value);	
				}
			}
			for (String value : ce.products) {
				products.add(value);
			}
		}
		
		// Load the initial chemicals as products
		for (ChemicalDto dto : Parser.parseChemicals(chemicals)) {
			products.add(dto.formula);
		}
		
		// Now we just have to check to see if each reactant has a product
		boolean pass = true;
		for (String reactant : reactants) {
			if (!products.contains(reactant)) {
				System.err.println("Reactant not present at start, or as byproduct: " + reactant);
				pass = false;
			}
		}
		if (pass) {
			System.out.println("All reactants present at start, or generated by byproducts.");
		}
	}
}
